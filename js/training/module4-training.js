// # Обєкти

// ## ЗАДАЧІ

// ```
// Напиши функцію, яка створює об'єкт з ім'ям і віком.
// Функція повинна приймати два аргументи: ім'я (рядок) і вік (число).
// Поверни цей об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і додає до нього нову властивість "address" (рядок).
// Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і новий вік.
// Функція повинна змінити значення властивості "age" в об'єкті на нове значення.
// Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і видаляє з нього властивість "age".
// Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і повертає значення властивості "name".
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і повертає true, якщо властивість "address" існує в об'єкті, і false, якщо ні.
// ```

// ---

// ```
// Напиши функцію, яка приймає два об'єкти і об'єднує їх в один.
// Якщо у об'єктів є однакові властивості, значення другого об'єкта мають замінити значення першого.
// Поверни результат.
// ```

// ---

// ```
// Напиши функцію, яка створює об'єкт з трьома властивостями: ім'ям, віком і адресою.
// Якщо ім'я та вік не передані, встанови їх значення за замовчуванням ("Unknown", 0 відповідно).
// Поверни об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт та нові значення для імені та віку. Функція повинна змінити обидві властивості в об'єкті. Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт та нову властивість "email" (якщо її немає).
// Якщо в об'єкті вже є "email", нічого не роби.
// Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і змінює тип значення властивості "age" з числа на рядок.
// Поверни оновлений об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт і змінює значення властивості "address", але тільки якщо ця властивість вже існує.
// Якщо її немає, поверни об'єкт без змін.
// ```

// ---

// ```
// Напиши функцію, яка приймає об'єкт користувача з властивостями name та сity. Та повертає рядок "User {імя користувача} from {місто користувача}!"
// ```

// ---

// ```
// Напиши функцію, яка приймає масив з ключами і значеннями (наприклад, [["name", "John"], ["age", 25], ["address", "123 Street"]]) і створює об'єкт з цих пар. Поверни об'єкт.
// ```

// ---

// ```
// Напиши функцію, яка приймає масив об'єктів і змінює в кожному з них властивість "age", збільшуючи її на 1. Поверни оновлений масив об'єктів.
// ```

// ---

// ## ОСНОВИ

// Створення об'єкта: Створіть об'єкт person, який містить властивості ім'я, вік та
// професія.

// Доступ до властивостей: Виведіть на консоль ім'я створеного об'єкта person.

// Зміна властивостей: Змініть вік в об'єкті person на нове значення.

// Додавання нових властивостей: Додайте до об'єкта person властивість місце_роботи
// зі значенням.

// Видалення властивостей: Видаліть властивість професія з об'єкта person.

// Пошук властивостей: Перевірте, чи існує властивість професія в об'єкті person.

// Зведення декількох об'єктів: Створіть ще один об'єкт friend, який містить
// інформацію про вашого друга. Потім об'єднайте властивості об'єкта friend з
// об'єктом person.

// Перебір властивостей: Виведіть всі властивості об'єкта person на консоль у
// вигляді ключ-значення.

// Методи об'єкта: Додайте до об'єкта person метод привітання, який буде виводити
// вітання з іменем особи.

// Застосування Object.keys(): Виведіть на консоль масив зі всіма ключами об'єкта
// person за допомогою функції Object.keys().

// ## Example 1 - Основи об'єктів

// Напиши скрипт, який для об'єкта `user`, послідовно:

// - додає поле `mood` зі значенням ``happy'`
// - замінює значення `hobby` на ``skydiving'`
// - замінює значення `premium` на `false`
// - виводить вміст об'єкта `user` у форматі `ключ: значення` використовуючи
//   `Object.keys()` і `for...of`

// ### Код

// ```js
// const user = {
//   name: 'Mango',
//   age: 20,
//   hobby: 'html',
//   premium: true,
// };
// ```

// ## Example 2 - метод Object.values()

// У нас є об'єкт, де зберігаються зарплати нашої команди. Напишіть код для
// підсумовування всіх зарплат і збережіть результат у змінній sum. Повинно
// вийти 390. Якщо об'єкт `salaries` порожній, то результат має бути 0.

// ### Код

// ```js
// const salaries = {
//   John: 100,
//   Ann: 160,
//   Pete: 130,
// };
// ```
// # Масив обєктів - spred та rest

// ---

// ```
// Написати систему контролю банку.

// Властивості:
// - список користувачів [userId, FIO,'password']
// - список рахунків [userId, accountNumber, value]

// Методи:
// - додати користувача
// - видалити користувача

// - створити рахунок
// - видалити рахунок

// - додати гроші на рахунок
// - зняти гроші з рахунка
// ```

// ---

// Менеджер завдань: Створіть функцію яка створює та повертає обьект завдання.
// Об'єкт task, який буде містити властивості Name, deadline, priority та done.
// Додайте методи для відмітки завдання як виконаного та для виведення
// інформаціїпро завдання.

// ---

// Каталог товарів: Створіть каталог товарів, де кожен товар буде об'єктом з
// властивостями назва, ціна та кількість. Додайте методи для додавання товару,
// видалення товару та підрахунку загальної вартості.

// ---

// Система реєстрації: Створіть систему реєстрації користувачів, де кожен
// користувач буде об'єктом з властивостями ім'я, email, пароль тощо. Додайте метод
// для перевірки введеного пароля при вході.

// ---

// Онлайн-книга: Створіть програму для ведення списку прочитаних книг. Кожна книга
// буде об'єктом з властивостями назва, автор, рік видання та прочитано
// (true/false). Додайте методи для відмітки книги як прочитаної та виведення
// статистики про прочитані книги.

// ---

// Ігровий персонаж: Створіть об'єкт, який представляє ігрового персонажа. Додайте
// властивості, такі як ім'я, рівень, здоров'я, атака тощо. Реалізуйте методи для
// атаки інших персонажів та відновлення здоров'я.

// ---

// Список контактів: Створіть програму для управління списком контактів. Кожен
// контакт буде об'єктом з властивостями ім'я, телефон, email тощо. Додайте методи
// для додавання, видалення та пошуку контактів.

// ---

// Календар подій: Створіть календар подій, де кожна подія буде об'єктом з
// властивостями назва, дата, місце та повідомлення. Додайте методи для додавання
// події, видалення події та перегляду подій на певну дату.

// ---

// Онлайн-магазин: Створіть онлайн-магазин з можливістю додавання товарів у кошик
// та оформлення замовлення. Кожен товар буде об'єктом з властивостями назва, ціна,
// наявність тощо. Реалізуйте методи для додавання товару у кошик, підрахунку
// загальної вартості та оформлення замовлення.

// ---

// Пошук інформації: Створіть програму, яка дозволить шукати інформацію в тексті.
// Ви створюєте об'єкт зі збереженими текстовими даними та методами для пошуку
// заданого слова або фрази у тексті.

// ---

// Банківський рахунок: Створіть об'єкт account, який міститиме інформацію про
// банківський рахунок користувача, таку як ім'я, баланс та історія транзакцій.
// Додайте методи для додавання та витрати коштів, а також для виведення історії
// транзакцій.

// ---

// ## Example 1 - Масив об'єктів

// Напишіть ф-цію `calcTotalPrice(stones, stoneName)`, яка приймає масив об'єктів
// та рядок з назвою каменю. Ф-ція вважає та повертає загальну вартість каміння з
// таким ім'ям, ціною та кількістю з об'єкта

// ### Код

// ```js
// const stones = [
//   { name: 'Смарагд', price: 1300, quantity: 4 },
//   { name: 'Діамант', price: 2700, quantity: 3 },
//   { name: 'Сапфір', price: 400, quantity: 7 },
//   { name: 'Щебінь', price: 200, quantity: 2 },
// ];
// ```

// ## Example 2 - Комплексні завдання

// Напиши скрипт управління особистим кабінетом інтернет-банку. Є об'єкт `account`
// в якому необхідно реалізувати методи для роботи з балансом та історією
// транзакцій.

// ```js
// /*
 * Типів транзацький лише два.
 * Можна покласти чи зняти гроші з рахунку.
 */
// const Transaction = {
//   DEPOSIT: 'deposit',
//   WITHDRAW: 'withdraw',
// };

// /*
 * Кожна транзакція це об'єкт із властивостями: id, type та amount
 */

// const account = {
  // Поточний баланс рахунку
//   balance: 0,

  // Історія транзакцій
//   transactions: [],

//   /*
   * Метод створює та повертає об'єкт транзакції.
   * Приймає суму та тип транзакції.
   */
//   createTransaction(amount, type) {},

//   /*
   * Метод, що відповідає за додавання суми до балансу.
   * Приймає суму танзакції.
   * Викликає createTransaction для створення об'єкта транзакції
   * після чого додає його в історію транзакцій
   */
//   deposit(amount) {},

//   /*
   * Метод, що відповідає за зняття суми з балансу.
   * Приймає суму танзакції.
   * Викликає createTransaction для створення об'єкта транзакції
   * Після чого додає його в історію транзакцій.
   *
   * Якщо amount більше ніж поточний баланс, виводь повідомлення
   * про те, що зняття такої суми не можливе, недостатньо коштів.
   */
//   withdraw(amount) {},

//   /*
   * Метод повертає поточний баланс
   */
//   getBalance() {},

//   /*
   * Метод шукає та повертає об'єкт транзації по id
   */
//   getTransactionDetails(id) {},

//   /*
   * Метод повертає кількість коштів
   * певного типу транзакції з усієї історії транзакцій
   */
//   getTransactionTotal(type) {},
// };
// ```
